TQLDDL CREATE ENTITY Comment {name typhonml.impl.PrimitiveDataTypeImpl@2f217633 (name: String, importedNamespace: null),id typhonml.impl.PrimitiveDataTypeImpl@2f217633 (name: String, importedNamespace: null)}
FROM Comment e SELECT e
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
TQLDDL DELETE ENTITY Comment on TyphonML [typhonml.impl.ModelImpl@47faa49c]
from Comment e select e
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
TQLDDL DELETE ENTITY Comment on TyphonML [typhonml.impl.ModelImpl@2fd1433e]
from Comment e select e
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
TQLDDL DELETE ENTITY Comment on TyphonML [typhonml.impl.ModelImpl@5e21e98f]
from Comment e select e
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
TQLDDL DELETE ENTITY Comment on TyphonML [typhonml.impl.ModelImpl@5e21e98f]
rename CreditCard to PaymentCard
from Comment e select e
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
create CreditCard.user -> User[1..1]
drop CreditCard.user
change User.paymentsDetails :->
change User.paymentsDetails ->
change User.paymentsDetails :->
create CreditCard.paymentsDetails_opposite -> User[1..*]
rename User.paymentsDetails to creditCards
change User.paymentsDetails [1..*]
create CreditCard.creationDate : Date
drop CreditCard.creationDate
rename CreditCard.expiryDate to expirationDate
rename CreditCard.expiryDate to expirationDate
change CreditCard.expiryDate : Date
drop CreditCard.newOppositeRelation
drop CreditCard.user
drop CreditCard.newOppositeRelation
create CreditCard.paymentsDetails_opposite -> User[1..*]
change User.paymentsDetails :->
rename User.paymentsDetails to creditCards
drop CreditCard.user
create CreditCard.user -> User[1..1]
change User.paymentsDetails [1..*]
change User.paymentsDetails :->
change User.paymentsDetails ->
from Comment e select e
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
rename CreditCard to PaymentCard
drop CreditCard.creationDate
create CreditCard.creationDate : Date
change CreditCard.expiryDate : Date
rename CreditCard.expiryDate to expirationDate
drop CreditCard.creationDate
create CreditCard.creationDate : Date
change CreditCard.expiryDate : Date
rename CreditCard.expiryDate to expirationDate
create Comment as DocumentDatabase
create Comment.name : String
create Comment.id : String
create Comment.responses -> Comment[0..*]
from Comment comment select comment
insert Comment { name:, id: } 
drop Comment
create Comment as 
create Comment.name : String
create Comment.id : String
create Comment.user -> User[1..1]
create Comment as DocumentDatabase
create Comment.name : String
create Comment.id : String
create Comment.responses -> Comment[0..*]
from Comment comment select comment
insert Comment { name:, id: } 
drop Comment
from Comment e select e
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
drop Comment
rename CreditCard to PaymentCard
create splittedEntity at RelationalDatabase
create splittedEntity.firstName : String
create splittedEntity.lastName : String
create splittedEntity.id : String
create splittedEntity.creationDate : Date
create User.to_splittedEntity -> splittedEntity[1..1]
from User userselect user where id = 1
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={splittedEntity=null}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
create splittedEntity at RelationalDatabase
create splittedEntity.firstName : String
create splittedEntity.lastName : String
create splittedEntity.id : String
create splittedEntity.creationDate : Date
create splittedEntity.to_User -> User[1..1]
from User userselect user where id = 1
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={splittedEntity=null}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
create SplittedEntity at RelationalDatabase
create SplittedEntity.firstName : String
create SplittedEntity.lastName : String
create SplittedEntity.id : String
create SplittedEntity.creationDate : Date
create SplittedEntity.to_User -> User[1..1]
from User userselect user where id = 1
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
create SplittedEntity at RelationalDatabase
create SplittedEntity.firstName : String
create SplittedEntity.lastName : String
create SplittedEntity.id : String
create SplittedEntity.creationDate : Date
create SplittedEntity.to_User -> User[1..1]
from User user select user where id = 1
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
create SplittedEntity at RelationalDatabase
create SplittedEntity.firstName : String
create SplittedEntity.lastName : String
create SplittedEntity.id : String
create SplittedEntity.creationDate : Date
create SplittedEntity.to_User -> User[1..1]
from User user select user where id = 1
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
create SplittedEntity at RelationalDatabase
create SplittedEntity.firstName : String
create SplittedEntity.lastName : String
create SplittedEntity.id : String
create SplittedEntity.creationDate : Date
create SplittedEntity.to_User -> User[1..1]
from User user select user where id = 1
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
create SplittedEntity at RelationalDatabase
create SplittedEntity.creationDate : Date
create SplittedEntity.lastName : String
create SplittedEntity.relation2 -> CreditCard[1..1]
create SplittedEntity.to_User -> User[1..1]
from User user select user
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
drop User.creationDate
drop User.lastName
drop User.relation2


create SplittedEntity at RelationalDatabase
create SplittedEntity.creationDate : Date
create SplittedEntity.lastName : String
create SplittedEntity.relation2 -> CreditCard[1..1]
create SplittedEntity.to_User -> User[1..1]
from User userselect user.lastName,user.creationDate
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
drop User.creationDate
drop User.lastName
drop User.relation2

create SplittedEntity at RelationalDatabase
create SplittedEntity.creationDate : Date
create SplittedEntity.lastName : String
create SplittedEntity.relation2 -> CreditCard[1..1]
create SplittedEntity.to_User -> User[1..1]
from User user select user.lastName,user.creationDate
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
drop User.creationDate
drop User.lastName
drop User.relation2
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
drop Comment
create CommentDB_migrated at DocumentDatabase
create CommentDB_migrated.name : String
create CommentDB_migrated.id : String
create CommentDB_migrated.responses -> Comment[0..*]
from CommentDB commentdb select commentdb
insert CommentDB_migrated { name:, id: } 
drop CommentDB
create CommentDB_migrated at DocumentDatabase
create CommentDB_migrated.name : String
create CommentDB_migrated.id : String
create CommentDB_migrated.responses -> Comment[0..*]
from CommentDB commentdb select commentdb
insert CommentDB_migrated { name:, id: } 
drop CommentDB
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment[0..*]
from CommentDB commentdb select commentdb
insert Comment_migrated { name:, id: } 
drop CommentDB
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment[0..*]
from CommentDB commentdb select commentdb
insert Comment_migrated { name:, id: } 
drop CommentDB

create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
drop Comment
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
drop Comment
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
drop Comment
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment_migrated[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
drop Comment
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment_migrated[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
drop Comment
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment_migrated[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
drop Comment
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment_migrated[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
drop Comment
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment_migrated[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
drop Comment
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment_migrated[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
drop Comment
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment_migrated[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
drop Comment
create Comment at 
create Comment.name : String
create Comment.id : String
create Comment.user -> User[1..1]
create SplittedEntity at RelationalDatabase
create SplittedEntity.creationDate : Date
create SplittedEntity.lastName : String
create SplittedEntity.relation2 -> CreditCard[1..1]
create SplittedEntity.to_User -> User[1..1]
from User user select user.lastName,user.creationDate
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
drop User.creationDate
drop User.lastName
drop User.relation2
create SplittedEntity at RelationalDatabase
create SplittedEntity.firstName : String
create SplittedEntity.lastName : String
create SplittedEntity.id : String
create SplittedEntity.creationDate : Date
create SplittedEntity.to_User -> User[1..1]
from User user select user where id = 1
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
create SplittedEntity at RelationalDatabase
create SplittedEntity.firstName : String
create SplittedEntity.lastName : String
create SplittedEntity.id : String
create SplittedEntity.creationDate : Date
create SplittedEntity.users -> SplittedEntity[0..*]
create SplittedEntity.to_User -> User[1..1]
from User user select user where id = 1
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
create SplittedEntity at RelationalDatabase
create SplittedEntity.creationDate : Date
create SplittedEntity.lastName : String
create SplittedEntity.relation2 -> CreditCard[1..1]
create SplittedEntity.users -> SplittedEntity[0..*]
create SplittedEntity.to_User -> User[1..1]
from User user select user.lastName,user.creationDate
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
drop User.creationDate
drop User.lastName
drop User.relation2
drop User.users


create SplittedEntity at RelationalDatabase
create SplittedEntity.creationDate : Date
create SplittedEntity.lastName : String
create SplittedEntity.relation2 -> CreditCard[1..1]
create SplittedEntity.users -> SplittedEntity[0..*]
create SplittedEntity.to_User -> User[1..1]
from User user select user.lastName,user.creationDate
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
drop User.creationDate
drop User.lastName
drop User.relation2
drop User.users

create SplittedEntity at RelationalDatabase
create SplittedEntity.firstName : String
create SplittedEntity.lastName : String
create SplittedEntity.id : String
create SplittedEntity.creationDate : Date
create SplittedEntity.users -> SplittedEntity[0..*]
create SplittedEntity.to_User -> User[1..1]
from User user select user where id = 1
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 

create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment_migrated[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
drop Comment
create SplittedEntity at RelationalDatabase
create SplittedEntity.creationDate : Date
create SplittedEntity.lastName : String
create SplittedEntity.relation2 -> CreditCard[1..1]
create SplittedEntity.users -> SplittedEntity[0..*]
create SplittedEntity.to_User -> User[1..1]
from User user select user.lastName,user.creationDate
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
drop User.creationDate
drop User.lastName
drop User.relation2
drop User.users
create Comment at 
create Comment.name : String
create Comment.id : String
create Comment.user -> User[1..1]
create SplittedEntity at RelationalDatabase
create SplittedEntity.firstName : String
create SplittedEntity.lastName : String
create SplittedEntity.id : String
create SplittedEntity.creationDate : Date
create SplittedEntity.users -> SplittedEntity[0..*]
create SplittedEntity.to_User -> User[1..1]
from User user select user where id = 1
TyphonQL 'insert' command working set : [{WorkingSetDummyImpl{rows={SplittedEntity=null}}}] 
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
create Comment_migrated at DocumentDatabase
create Comment_migrated.name : String
create Comment_migrated.id : String
create Comment_migrated.responses -> Comment_migrated[0..*]
from Comment comment select comment
insert Comment_migrated { name:, id: } 
drop Comment
from Comment comment select comment
TyphonQL 'delete' command working set : [{WorkingSetDummyImpl{rows={}}}] 
drop Comment
rename CreditCard to PaymentCard
create Comment at RelationalDatabase
create Comment.name : String
create Comment.id : String
create Comment.newRelation -> CreditCard[0..1]
create Comment at RelationalDatabase
create Comment.name : String
create Comment.id : String
create Comment.newRelation -> CreditCard[0..1]
create Comment at RelationalDatabase
create Comment.name : String
create Comment.id : String
create Comment.newRelation -> CreditCard[0..1]
create Comment at RelationalDatabase
create Comment.name : String
create Comment.id : String
create Comment.newRelation -> CreditCard[0..1]
create Comment at RelationalDatabase
create Comment.name : String
create Comment.id : String
create Comment.newRelation -> CreditCard[0..1]
create Comment at RelationalDatabase
create Comment.name : String
create Comment.id : String
create Comment.newRelation -> CreditCard[0..*]
